<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机实践学习(第一周)</title>
      <link href="/2025/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/07/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="TDD结构"><a href="#TDD结构" class="headerlink" title="TDD结构"></a>TDD结构</h1><p>TDD（Test-Driven Development，测试驱动开发），核心思想是<strong>先写测试，再写代码</strong>。<br>这次我们将通过fizzbuzz这个例子来辅助理解</p><h2 id="红绿结构"><a href="#红绿结构" class="headerlink" title="红绿结构"></a>红绿结构</h2><p>1.红（red）：即编写一个错误的测试用例，先写测试代码，此时由于没有实现对应的功能，测试失败，变为红色。<br>2.绿（green）：即编写一个正确的测试用例，此时实现了对应功能，测试成功，变为绿色。<br>3.重构（refactor）：在不改变代码功能的前提下，优化代码结构，同时保持测试通过。</p><h1 id="fizzbuzz函数的编写"><a href="#fizzbuzz函数的编写" class="headerlink" title="fizzbuzz函数的编写"></a>fizzbuzz函数的编写</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><strong>fizzbuzz.h</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">std::string fizzBuzz(int value);</span><br></pre></td></tr></table></figure><h2 id="cpp文件"><a href="#cpp文件" class="headerlink" title="cpp文件"></a>cpp文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;pch.h&quot; //后面解释</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;fizzbuzz.h&quot;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">std::string fizzBuzz(int value) &#123;</span><br><span class="line">    if (value % 3 == 0 &amp;&amp; value % 5 == 0) &#123;</span><br><span class="line">        return &quot;FizzBuzz&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (value % 3 == 0) &#123;</span><br><span class="line">        return &quot;Fizz&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (value % 5 == 0) &#123;</span><br><span class="line">        return &quot;Buzz&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        return std::to_string(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int value;</span><br><span class="line">    cin &gt;&gt; value;</span><br><span class="line">    cout &lt;&lt; fizzBuzz(value) &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试用例的编写"><a href="#测试用例的编写" class="headerlink" title="测试用例的编写"></a>测试用例的编写</h1><h2 id="vs2022中的测试管理系统"><a href="#vs2022中的测试管理系统" class="headerlink" title="vs2022中的测试管理系统"></a>vs2022中的测试管理系统</h2><p>1.fizzbuzz_test.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;pch.h&quot; //预编译头文件</span><br><span class="line">#include &quot;fizzbuzz.h&quot;</span><br><span class="line">#include &quot;CppUnitTest.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace Microsoft::VisualStudio::CppUnitTestFramework;</span><br><span class="line"></span><br><span class="line">namespace fizzbuzztest</span><br><span class="line">&#123;</span><br><span class="line">TEST_CLASS(fizzbuzztest)</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">TEST_METHOD(TestMethod1)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;1&quot;), fizzBuzz(1));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod2)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;2&quot;), fizzBuzz(2));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod3)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Fizz&quot;), fizzBuzz(3));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod4)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;4&quot;), fizzBuzz(4));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod5)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Buzz&quot;), fizzBuzz(5));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod6)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Fizz&quot;), fizzBuzz(6));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod7)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;7&quot;), fizzBuzz(7));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod8)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;8&quot;), fizzBuzz(8));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod9)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Fizz&quot;), fizzBuzz(9));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod10)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Buzz&quot;), fizzBuzz(10));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod11)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;11&quot;), fizzBuzz(11));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod12)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;Fizz&quot;), fizzBuzz(12));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod13)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;13&quot;), fizzBuzz(13));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod14)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;14&quot;), fizzBuzz(14));</span><br><span class="line">&#125;</span><br><span class="line">TEST_METHOD(TestMethod15)</span><br><span class="line">&#123;</span><br><span class="line">Assert::AreEqual(std::string(&quot;FizzBuzz&quot;), fizzBuzz(15));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.pch.h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ifndef PCH_H</span><br><span class="line">#define PCH_H</span><br><span class="line"></span><br><span class="line">// 添加要在此处预编译的标头</span><br><span class="line"></span><br><span class="line">#endif </span><br></pre></td></tr></table></figure><p>3.pch.cpp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;pch.h&quot;</span><br><span class="line">// 当使用预编译的头时，需要使用此源文件，编译才能成功。</span><br></pre></td></tr></table></figure><h1 id="用例运行"><a href="#用例运行" class="headerlink" title="用例运行"></a>用例运行</h1><p>在vs2022页面上面找到测试，点击，出现测试资源管理器，点击，出现一个绿色小三角，点击旁边的白色倒三角，出现运行全部测试用例，接着点击即可。<br>过一会就会出现测试通过的界面了~<br><img src="/img/%E8%BF%90%E8%A1%8C%E5%9B%BE%E7%89%87.png" alt="示例图片" title="测试完成如图所示"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 计算机 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2025/02/20/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/02/20/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>我是秃头的君寻酱，喜欢打游戏、看动漫，最喜欢的游戏是重返未来1999，欢迎同好找我玩喵<br>我还是一名计算机专业的大一新生，希望通过博客来分享我的学习过程和日常的活动(✿◡‿◡)<br>本人是一名小白，欢迎各位大佬多多指教~~~&#x2F;(^v^)~~~</p><h3 id="对未来的展望"><a href="#对未来的展望" class="headerlink" title="对未来的展望"></a>对未来的展望</h3><p>对于我自己来说的话，目前还没有分流，我也不知道以后的方向是什么，希望一直坚持走下去吧<br>目前对3d建模这个行业比较向往，如果可以的话，希望能保上研 但是真的很难&#x2F;(ㄒoㄒ)&#x2F;~~</p><h3 id="学习的语言"><a href="#学习的语言" class="headerlink" title="学习的语言"></a>学习的语言</h3><p>目前只学习了c++，学的还不够好，这学期一定会加油的</p><h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><p>打游戏，看动漫，画画，目前最喜欢的角色是逻各斯(❤ ω ❤)</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
